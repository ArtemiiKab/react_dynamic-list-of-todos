{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["getUser","userId","fetch","then","response","json","TodoList","todos","selectUser","updateCompleted","filterTodos","handleSelect","className","type","placeholder","onChange","event","target","value","map","todo","cn","completed","key","id","checked","title","onClick","CurrentUser","state","user","this","props","setState","data","prevProps","clearUser","name","email","phone","React","Component","App","selectedUserId","todosCopy","select","prevState","Number","filter","el","includes","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f069ee6.chunk.js","sourcesContent":["const API_TODO_URL = 'https://mate-api.herokuapp.com/todos';\n\nexport const getTodos = () => (\n  fetch(API_TODO_URL)\n    .then(response => response.json())\n);\n\nexport const getUser = userId => (\n  fetch(`https://mate-api.herokuapp.com/users/${userId}`)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport cn from 'classnames';\nimport './TodoList.scss';\n\nexport const TodoList = ({ todos, selectUser, updateCompleted, filterTodos, handleSelect }) => {\n  return (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <input\n      type=\"text\"\n      placeholder=\"filter todos\"\n      onChange={event => filterTodos(event.target)}\n    />\n    <select\n      onChange={event => handleSelect(event.target.value)}\n    >\n      <option>\n        All\n      </option>\n      <option>\n        Active\n      </option>\n      <option>\n        Completed\n      </option>\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={cn(\n              \"TodoList__item\",\n              todo.completed\n                ? \"TodoList__item--checked\"\n                : \"TodoList__item--unchecked\"\n            )}\n            key={todo.id}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={event => updateCompleted(event.target)}\n                value={todo.id}\n              />\n              <p>{todo.title}</p>\n            </label>\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectUser(todo)}\n            >\n              User&nbsp;#{todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n)};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    getUser(this.props.user.userId)\n      .then(user => this.setState({ user: user.data }));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.user.userId === this.props.user.userId) {\n      return;\n    }\n    getUser(this.props.userId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { clearUser } = this.props;\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>Selected user: {user.id}</span></h2>\n  \n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n      <button\n        type=\"button\"\n        onClick={() => clearUser()}\n      >\n        Clear\n      </button>\n     </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos} from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    user: [],\n    todosCopy: [],\n    select: 'All',\n  };\n\n  selectUser = (user) => {\n    this.setState({\n      user: user,\n      selectedUserId: user.userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      user: [],\n      selectedUserId: 0,\n    })\n  }\n\n  componentDidMount() {\n    getTodos()\n      .then((result) => {\n        this.setState({\n          todos: result.data,\n          todosCopy: result.data,\n        })\n      })\n  }\n\n  updateCompleted = target => {\n    this.setState(prevState => ({\n      todosCopy: prevState.todosCopy.map(todo => {\n        if (todo.id !== Number(target.value)) {\n          return {...todo}\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        }\n      })\n    }))\n  }\n\n  filterTodos = target => {\n    this.setState(prevState => ({\n      todosCopy: prevState.todos.filter(el => (\n        el.title && el.title.includes(target.value)\n      )),\n    }));\n  }\n\n  handleSelect = target => {\n    if (target === 'All') {\n      this.setState(prevState =>({todosCopy: prevState.todos}))\n    } else if (target === 'Active') {\n      this.setState(prevState => ({\n        todosCopy: prevState.todos.filter(el => (\n          !el.completed\n        ))\n      }))\n    } else if (target === 'Completed') {\n      this.setState(prevState => ({\n        todosCopy: prevState.todos.filter(el => el.completed)\n      }))\n    }\n  }\n\n  render() {\n    const { todosCopy, selectedUserId, user, } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todosCopy}\n            selectUser={this.selectUser}\n            updateCompleted={this.updateCompleted}\n            filterTodos={this.filterTodos}\n            handleSelect={this.handleSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser user={user} clearUser={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}